import matplotlib.pyplot as plt
import numpy as np


def plot_split(npy_arr, subject_name, channel_name, start_loc, end_loc):
    """
    Plots the section of data that will be used to train on
    :param npy_arr: the data to be plotted
    :param subject_name: name of subject to be used on title
    :param channel_name: name of channel to be used on title
    :param start_loc: index where training set section starts
    :param end_loc: index where training set section ends
    :return:
    """
    plt.plot(npy_arr[:, 0])
    plt.title("train split for " + subject_name + channel_name)
    plt.legend(["sig_val", "false_ans", "non_target", "true_ans", "pre_target", "3", "corr_targ", "incorr_targ"], loc=1)
    plt.axvspan(start_loc, end_loc, color='grey', alpha=0.5)
    plt.show()


def plot_real_pred_signal(y_test, y_hat, chan_id, path_train):
    """
    Plots real signal values and predicted ones
    :param y_test: real signal values
    :param y_hat: predicted signal values
    :param chan_id: name of channel for plot title
    :param path_train: training path to get name of subject for plot title
    :return:
    """
    plt.plot(y_test, color='blue', label='actual values', linewidth=1)
    plt.plot(y_hat, color='red', label='predicted values', linewidth=1)

    plt.title('actual vs pred vals ' + chan_id + ' ' + path_train.split('temp')[1])
    plt.xlabel('time in ms')
    plt.ylabel('signal_normalized')
    plt.show()


def plot_telemanom_anomalies(y_test, y_hat, anom, path_train):
    """
    Plots anomalies generated by telemanom
    :param y_test: Array of real signal values to analyze
    :param y_hat: Smoothed array of signal values to analyze
    :param anom: anomaly object that contains the anomalous sequences
    :param path_train: path where training set is saved to find the name of the subject used for plot title
    :return:
    """
    plt.plot(y_test, color='blue', label='actual values', linewidth=1)
    plt.plot(y_hat, color='red', label='predicted values', linewidth=1)

    for start, end in anom['anomaly_sequences']:
        plt.axvspan(start, end, color='grey', alpha=0.5)
    plt.title('actual vs pred vals ' + anom['chan_id'] + ' ' + path_train.split('temp')[1])
    plt.xlabel('time in ms')
    plt.ylabel('signal_normalized')
    plt.show()

def plot_loss(history, anom):
    """
    Plots loss history when lstm is being trained
    :param history: LSTM training history
    :param anom: anomaly object
    :return:
    """
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.title('model loss for ' + anom['chan_id'])
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.legend(['train', 'val'], loc='upper left')
    plt.show()